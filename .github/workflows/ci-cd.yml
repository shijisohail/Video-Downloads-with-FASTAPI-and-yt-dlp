name: CI CD Pipeline

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
      reason:
        description: 'Reason for manual deployment'
        required: false
        default: 'Manual deployment'

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest

    steps:
    - name: Show deployment info
      run: |
        echo "🔧 Deployment triggered by: ${{ github.event_name }}"
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "📝 Reason: ${{ github.event.inputs.reason }}"
          echo "🌍 Environment: ${{ github.event.inputs.environment }}"
        fi
        echo "👤 Triggered by: ${{ github.actor }}"
        echo "🌟 Branch: ${{ github.ref_name }}"
        
    - name: Deploy via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          echo "🚀 Starting deployment..."
          
          # Go to project directory
          cd /home/ubuntu/Video-Downloads-with-FASTAPI-and-yt-dlp
          
          # Pull latest changes
          echo "📥 Pulling latest code..."
          git pull origin master
          
          # Stop any containers running on port 8888
          echo "🚫 Stopping any containers using port 8888..."
          PORT_CONTAINERS=$(docker ps --filter "publish=8888" -q)
          if [ ! -z "$PORT_CONTAINERS" ]; then
            echo "Found containers using port 8888: $PORT_CONTAINERS"
            docker stop $PORT_CONTAINERS
            docker rm $PORT_CONTAINERS
          else
            echo "No containers found using port 8888"
          fi
          
          # Stop and remove existing containers completely
          echo "🛑 Stopping and removing existing containers by name..."
          docker stop video-downloader-app || echo "No video-downloader-app container to stop"
          docker rm video-downloader-app || echo "No video-downloader-app container to remove"
          docker stop video-api || echo "No video-api container to stop"
          docker rm video-api || echo "No video-api container to remove"
          
          # Remove existing images
          echo "🗑️ Removing existing images..."
          docker rmi video-downloader || echo "No video-downloader image to remove"
          docker rmi video-api || echo "No video-api image to remove"
          
          # Clean up all stopped containers and dangling images
          echo "🧹 Cleaning up Docker resources..."
          docker container prune -f
          docker image prune -f
          
          # Build fresh Docker image
          echo "🔨 Building fresh Docker image..."
          docker build -t video-downloader . --no-cache
          
          # Run new container with proper configuration
          echo "🚀 Starting new container..."
          docker run -d \
            --name video-downloader-app \
            --restart unless-stopped \
            -p 8888:8888 \
            -v $(pwd)/downloaded_videos:/app/downloaded_videos \
            -v $(pwd)/logs:/app/logs \
            -v $(pwd)/cookies:/app/cookies \
            video-downloader
          
          # Wait and check
          echo "⏳ Waiting for app to start..."
          sleep 30
          
          # Health check
          if curl -f http://localhost:8888/api/v1/health; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Health check failed!"
            exit 1
          fi
